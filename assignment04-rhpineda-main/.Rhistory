"%id < 50 AND Eval = 0" = sum((sum(pct.identity < 50)/n())/(sum(evalue == 0.00)/n())))
#added library at the top of Rmd
upset.table <- uniq.blast.results %>%
select( subject.acc.ver, strategy) %>%
table() %>%
as.data.frame.matrix()
upset.table
upset(upset.table)
uniq.blastn <- uniq.blast.results %>%  #Filter uniq.blast.results to only get ones w/ complete genome
ungroup %>%
filter(strategy == "blastnWS11",
str_detect(subject.title, "complete genome"))
#head(uniq.blastn)
#uniq.blastn %>%  #way to see that there are multiple isolates for a subject via subject title
#pull(subject.title) #%>%
#head()
uniq.blastn[c(1437, 2307, 2081),] %>% select(subject.title) #See before separation
uniq.blastn <- uniq.blastn %>% #Separate subject.title
separate(subject.title,
into=c("acc", "isolate", "compute", "name", "country", "host"),
remove = FALSE,
sep = "\\|")
uniq.blastn[c(1437, 2307, 2081),] %>%
select(subject.title, acc, isolate, compute, name, country, host) #investigate offending observations via slicing
uniq.blastn.filtered <- uniq.blastn[c(-1437, -2307, -2081),]
uniq.blastn.filtered <- uniq.blastn.filtered %>%
mutate_all(function(x) ifelse(x=="", NA, x))
uniq.blastn.filtered <- na.omit(uniq.blastn.filtered)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
group_by(name, country, host) %>%
slice_max(order_by = pct.identity, n=2)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
filter(alignment.length >= 5000)
nrow(uniq.blastn.filtered)
library(tidyverse)
library(UpSetR)
library(Biostrings)
100/17
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../input/ncbi_virus_110119_2.txt.gz")
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../input/ncbi_virus_110119_2.txt")
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
selected.seqs <- uniq.blastn.filtered %>%
ncbi.seqs[uniq.blastn.filtered]
selected.seqs <- uniq.blastn.filtered[ncbi.seqs]
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
uniq.blastn.filtered$subject.title
View(ncbi.seqs)
ncbi.seqs
#have ncbises w/ a bunch of shit
ncbi.seqs[names]
#have ncbises w/ a bunch of shit
ncbi.seqs[uniq.blastn.filtered$subject.title]
#uniq.blastn.filtered$subject.title
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
nrow(selected.seqs)
View(selected.seqs)
View(selected.seqs)
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
str(selected.seqs)
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt")
selected.seqs <- c(seqH)
summary(selected.seqs)
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
library(tidyverse)
library(UpSetR)
library(Biostrings)
headers <- readLines("../input/blastout.mega.WS11.tsv.gz", n = 4)
headers <- headers[4]
headers
headers <- headers %>%
str_remove("# Fields: ") %>% # get rid of the extraneous information
str_split(", ") %>% #split into pieces
unlist() %>% #convert to vector
make.names() %>% #make names the R can understand
str_replace(fixed(".."), ".") %>% # get rid of double .. in names.
str_replace("X.identity", "pct.identity") # "%" got replaced with X, we can do better.
headers
megaWS11 <- read_tsv("../input/blastout.mega.WS11.tsv.gz", col_names=headers, comment="#")
megaWS28 <- read_tsv("../input/blastout.mega.WS28.tsv.gz", col_names=headers, comment="#")
blastnWS11 <- read_tsv("../input/blastout.task_blastn.WS11.tsv.gz", col_names=headers, comment="#")
dc_megaWS11 <- read_tsv("../input/blastout.task_dc-megablast.WS11.tsv.gz", col_names=headers, comment="#")
tblastx <- read_tsv("../input/blastout.tblastx.tsv.gz", col_names=headers, comment="#")
blast.results <- bind_rows(list(megaWS11=megaWS11,
megaWS28=megaWS28,
blastnWS11=blastnWS11,
dc_megaWS11=dc_megaWS11,
tblastx=tblastx),
.id="strategy")
head(blast.results)
blast.results %>%
group_by(strategy) %>%
summarize("Hits" = n())
#str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
uniq.blast.results <- blast.results %>%
group_by(strategy, subject.acc.ver) %>%
slice_max(order_by = alignment.length,  n = 1)
uniq.blast.results
#str(blast.results)
uniq.blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, evalue, pct.identity) %>%
summarise("Frac of Eval = 0" = (sum(evalue == 0.00)/n()),
"%id < 50" = (sum(pct.identity < 50)/n()),
"%id < 50 AND Eval = 0" = sum((sum(pct.identity < 50)/n())/(sum(evalue == 0.00)/n())))
#added library at the top of Rmd
upset.table <- uniq.blast.results %>%
select( subject.acc.ver, strategy) %>%
table() %>%
as.data.frame.matrix()
upset.table
upset(upset.table)
uniq.blastn <- uniq.blast.results %>%  #Filter uniq.blast.results to only get ones w/ complete genome
ungroup %>%
filter(strategy == "blastnWS11",
str_detect(subject.title, "complete genome"))
#head(uniq.blastn)
#uniq.blastn %>%  #way to see that there are multiple isolates for a subject via subject title
#pull(subject.title) #%>%
#head()
uniq.blastn[c(1437, 2307, 2081),] %>% select(subject.title) #See before separation
uniq.blastn <- uniq.blastn %>% #Separate subject.title
separate(subject.title,
into=c("acc", "isolate", "compute", "name", "country", "host"),
remove = FALSE,
sep = "\\|")
uniq.blastn[c(1437, 2307, 2081),] %>%
select(subject.title, acc, isolate, compute, name, country, host) #investigate offending observations via slicing
uniq.blastn.filtered <- uniq.blastn[c(-1437, -2307, -2081),]
uniq.blastn.filtered <- uniq.blastn.filtered %>%
mutate_all(function(x) ifelse(x=="", NA, x))
uniq.blastn.filtered <- na.omit(uniq.blastn.filtered)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
group_by(name, country, host) %>%
slice_max(order_by = pct.identity, n=2)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
filter(alignment.length >= 5000)
nrow(uniq.blastn.filtered)
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt")
selected.seqs <- c(selected.seqs, seqH)
summary(selected.seqs)
?writeXStringSet
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt") #extract seqH
selected.seqs <- c(selected.seqs, seqH) #add to selected seq
summary(selected.seqs) #check for 196
writeXStringSet(selected.seqs, "selected_viral_seqs.fa")
library(tidyverse)
library(UpSetR)
library(Biostrings)
headers <- readLines("../input/blastout.mega.WS11.tsv.gz", n = 4)
headers <- headers[4]
headers
headers <- headers %>%
str_remove("# Fields: ") %>% # get rid of the extraneous information
str_split(", ") %>% #split into pieces
unlist() %>% #convert to vector
make.names() %>% #make names the R can understand
str_replace(fixed(".."), ".") %>% # get rid of double .. in names.
str_replace("X.identity", "pct.identity") # "%" got replaced with X, we can do better.
headers
megaWS11 <- read_tsv("../input/blastout.mega.WS11.tsv.gz", col_names=headers, comment="#")
megaWS28 <- read_tsv("../input/blastout.mega.WS28.tsv.gz", col_names=headers, comment="#")
blastnWS11 <- read_tsv("../input/blastout.task_blastn.WS11.tsv.gz", col_names=headers, comment="#")
dc_megaWS11 <- read_tsv("../input/blastout.task_dc-megablast.WS11.tsv.gz", col_names=headers, comment="#")
tblastx <- read_tsv("../input/blastout.tblastx.tsv.gz", col_names=headers, comment="#")
blast.results <- bind_rows(list(megaWS11=megaWS11,
megaWS28=megaWS28,
blastnWS11=blastnWS11,
dc_megaWS11=dc_megaWS11,
tblastx=tblastx),
.id="strategy")
head(blast.results)
blast.results %>%
group_by(strategy) %>%
summarize("Hits" = n())
#str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
uniq.blast.results <- blast.results %>%
group_by(strategy, subject.acc.ver) %>%
slice_max(order_by = alignment.length,  n = 1)
uniq.blast.results
#str(blast.results)
uniq.blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, evalue, pct.identity) %>%
summarise("Frac of Eval = 0" = (sum(evalue == 0.00)/n()),
"%id < 50" = (sum(pct.identity < 50)/n()),
"%id < 50 AND Eval = 0" = sum((sum(pct.identity < 50)/n())/(sum(evalue == 0.00)/n())))
#added library at the top of Rmd
upset.table <- uniq.blast.results %>%
select( subject.acc.ver, strategy) %>%
table() %>%
as.data.frame.matrix()
upset.table
upset(upset.table)
uniq.blastn <- uniq.blast.results %>%  #Filter uniq.blast.results to only get ones w/ complete genome
ungroup %>%
filter(strategy == "blastnWS11",
str_detect(subject.title, "complete genome"))
#head(uniq.blastn)
#uniq.blastn %>%  #way to see that there are multiple isolates for a subject via subject title
#pull(subject.title) #%>%
#head()
uniq.blastn[c(1437, 2307, 2081),] %>% select(subject.title) #See before separation
uniq.blastn <- uniq.blastn %>% #Separate subject.title
separate(subject.title,
into=c("acc", "isolate", "compute", "name", "country", "host"),
remove = FALSE,
sep = "\\|")
uniq.blastn[c(1437, 2307, 2081),] %>%
select(subject.title, acc, isolate, compute, name, country, host) #investigate offending observations via slicing
uniq.blastn.filtered <- uniq.blastn[c(-1437, -2307, -2081),]
uniq.blastn.filtered <- uniq.blastn.filtered %>%
mutate_all(function(x) ifelse(x=="", NA, x))
uniq.blastn.filtered <- na.omit(uniq.blastn.filtered)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
group_by(name, country, host) %>%
slice_max(order_by = pct.identity, n=2)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
filter(alignment.length >= 5000)
nrow(uniq.blastn.filtered)
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt") #extract seqH
selected.seqs <- c(selected.seqs, seqH) #add to selected seq
summary(selected.seqs) #check for 196
writeXStringSet(selected.seqs, "selected_viral_seqs.fa")
library(tidyverse)
library(UpSetR)
library(Biostrings)
headers <- readLines("../input/blastout.mega.WS11.tsv.gz", n = 4)
headers <- headers[4]
headers
headers <- headers %>%
str_remove("# Fields: ") %>% # get rid of the extraneous information
str_split(", ") %>% #split into pieces
unlist() %>% #convert to vector
make.names() %>% #make names the R can understand
str_replace(fixed(".."), ".") %>% # get rid of double .. in names.
str_replace("X.identity", "pct.identity") # "%" got replaced with X, we can do better.
headers
megaWS11 <- read_tsv("../input/blastout.mega.WS11.tsv.gz", col_names=headers, comment="#")
megaWS28 <- read_tsv("../input/blastout.mega.WS28.tsv.gz", col_names=headers, comment="#")
blastnWS11 <- read_tsv("../input/blastout.task_blastn.WS11.tsv.gz", col_names=headers, comment="#")
dc_megaWS11 <- read_tsv("../input/blastout.task_dc-megablast.WS11.tsv.gz", col_names=headers, comment="#")
tblastx <- read_tsv("../input/blastout.tblastx.tsv.gz", col_names=headers, comment="#")
blast.results <- bind_rows(list(megaWS11=megaWS11,
megaWS28=megaWS28,
blastnWS11=blastnWS11,
dc_megaWS11=dc_megaWS11,
tblastx=tblastx),
.id="strategy")
head(blast.results)
blast.results %>%
group_by(strategy) %>%
summarize("Hits" = n())
#str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
uniq.blast.results <- blast.results %>%
group_by(strategy, subject.acc.ver) %>%
slice_max(order_by = alignment.length,  n = 1)
uniq.blast.results
#str(blast.results)
uniq.blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, evalue, pct.identity) %>%
summarise("Frac of Eval = 0" = (sum(evalue == 0.00)/n()),
"%id < 50" = (sum(pct.identity < 50)/n()),
"%id < 50 AND Eval = 0" = sum((sum(pct.identity < 50)/n())/(sum(evalue == 0.00)/n())))
#added library at the top of Rmd
upset.table <- uniq.blast.results %>%
select( subject.acc.ver, strategy) %>%
table() %>%
as.data.frame.matrix()
upset.table
upset(upset.table)
uniq.blastn <- uniq.blast.results %>%  #Filter uniq.blast.results to only get ones w/ complete genome
ungroup %>%
filter(strategy == "blastnWS11",
str_detect(subject.title, "complete genome"))
#head(uniq.blastn)
#uniq.blastn %>%  #way to see that there are multiple isolates for a subject via subject title
#pull(subject.title) #%>%
#head()
uniq.blastn[c(1437, 2307, 2081),] %>% select(subject.title) #See before separation
uniq.blastn <- uniq.blastn %>% #Separate subject.title
separate(subject.title,
into=c("acc", "isolate", "compute", "name", "country", "host"),
remove = FALSE,
sep = "\\|")
uniq.blastn[c(1437, 2307, 2081),] %>%
select(subject.title, acc, isolate, compute, name, country, host) #investigate offending observations via slicing
uniq.blastn.filtered <- uniq.blastn[c(-1437, -2307, -2081),]
uniq.blastn.filtered <- uniq.blastn.filtered %>%
mutate_all(function(x) ifelse(x=="", NA, x))
uniq.blastn.filtered <- na.omit(uniq.blastn.filtered)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
group_by(name, country, host) %>%
slice_max(order_by = pct.identity, n=2)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
filter(alignment.length >= 5000)
nrow(uniq.blastn.filtered)
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt") #extract seqH
selected.seqs <- c(selected.seqs, seqH) #add to selected seq
summary(selected.seqs) #check for 196
writeXStringSet(selected.seqs, "../outputs/selected_viral_seqs.fa")
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt") #extract seqH
selected.seqs <- c(selected.seqs, seqH) #add to selected seq
summary(selected.seqs) #check for 196
writeXStringSet(selected.seqs, "../output/selected_viral_seqs.fa")
library(tidyverse)
library(UpSetR)
library(Biostrings)
headers <- readLines("../input/blastout.mega.WS11.tsv.gz", n = 4)
headers <- headers[4]
headers
headers <- headers %>%
str_remove("# Fields: ") %>% # get rid of the extraneous information
str_split(", ") %>% #split into pieces
unlist() %>% #convert to vector
make.names() %>% #make names the R can understand
str_replace(fixed(".."), ".") %>% # get rid of double .. in names.
str_replace("X.identity", "pct.identity") # "%" got replaced with X, we can do better.
headers
megaWS11 <- read_tsv("../input/blastout.mega.WS11.tsv.gz", col_names=headers, comment="#")
megaWS28 <- read_tsv("../input/blastout.mega.WS28.tsv.gz", col_names=headers, comment="#")
blastnWS11 <- read_tsv("../input/blastout.task_blastn.WS11.tsv.gz", col_names=headers, comment="#")
dc_megaWS11 <- read_tsv("../input/blastout.task_dc-megablast.WS11.tsv.gz", col_names=headers, comment="#")
tblastx <- read_tsv("../input/blastout.tblastx.tsv.gz", col_names=headers, comment="#")
blast.results <- bind_rows(list(megaWS11=megaWS11,
megaWS28=megaWS28,
blastnWS11=blastnWS11,
dc_megaWS11=dc_megaWS11,
tblastx=tblastx),
.id="strategy")
head(blast.results)
blast.results %>%
group_by(strategy) %>%
summarize("Hits" = n())
#str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
uniq.blast.results <- blast.results %>%
group_by(strategy, subject.acc.ver) %>%
slice_max(order_by = alignment.length,  n = 1)
uniq.blast.results
#str(blast.results)
uniq.blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
blast.results %>%
group_by(strategy) %>%
select(strategy, pct.identity, alignment.length) %>%
summarise("Avg Alm Length" = mean(alignment.length),
"Max Alm Length" = max(alignment.length),
"Total Alm Length" = sum(alignment.length),
"Average % Identity" = mean(pct.identity))
str(blast.results)
blast.results %>%
group_by(strategy) %>%
select(strategy, evalue, pct.identity) %>%
summarise("Frac of Eval = 0" = (sum(evalue == 0.00)/n()),
"%id < 50" = (sum(pct.identity < 50)/n()),
"%id < 50 AND Eval = 0" = sum((sum(pct.identity < 50)/n())/(sum(evalue == 0.00)/n())))
#added library at the top of Rmd
upset.table <- uniq.blast.results %>%
select( subject.acc.ver, strategy) %>%
table() %>%
as.data.frame.matrix()
upset.table
upset(upset.table)
uniq.blastn <- uniq.blast.results %>%  #Filter uniq.blast.results to only get ones w/ complete genome
ungroup %>%
filter(strategy == "blastnWS11",
str_detect(subject.title, "complete genome"))
#head(uniq.blastn)
#uniq.blastn %>%  #way to see that there are multiple isolates for a subject via subject title
#pull(subject.title) #%>%
#head()
uniq.blastn[c(1437, 2307, 2081),] %>% select(subject.title) #See before separation
uniq.blastn <- uniq.blastn %>% #Separate subject.title
separate(subject.title,
into=c("acc", "isolate", "compute", "name", "country", "host"),
remove = FALSE,
sep = "\\|")
uniq.blastn[c(1437, 2307, 2081),] %>%
select(subject.title, acc, isolate, compute, name, country, host) #investigate offending observations via slicing
uniq.blastn.filtered <- uniq.blastn[c(-1437, -2307, -2081),]
uniq.blastn.filtered <- uniq.blastn.filtered %>%
mutate_all(function(x) ifelse(x=="", NA, x))
uniq.blastn.filtered <- na.omit(uniq.blastn.filtered)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
group_by(name, country, host) %>%
slice_max(order_by = pct.identity, n=2)
nrow(uniq.blastn.filtered)
uniq.blastn.filtered <- uniq.blastn.filtered %>%
filter(alignment.length >= 5000)
nrow(uniq.blastn.filtered)
#added library(Biostrings) at the top
ncbi.seqs <- readDNAStringSet("../../assignment02-rhpineda/input/ncbi_virus_110119_2.txt")
ncbi.seqs
selected.seqs <- ncbi.seqs[uniq.blastn.filtered$subject.title]
summary(selected.seqs)
seqH <- readDNAStringSet("../../assignment02-rhpineda/input/bestcandidate.txt") #extract seqH
selected.seqs <- c(selected.seqs, seqH) #add to selected seq
summary(selected.seqs) #check for 196
writeXStringSet(selected.seqs, "../output/selected_viral_seqs.fa")
